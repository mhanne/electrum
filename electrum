#!/usr/bin/env python
#
# Electrum - lightweight Bitcoin client
# Copyright (C) 2011 thomasv@gitorious
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import re
import sys
# import argparse
import optparse

try:
    from lib.util import print_error
except ImportError:
    from electrum.util import print_error

try:
    import ecdsa  
except ImportError:
    sys.exit("Error: python-ecdsa does not seem to be installed. Try 'sudo pip install ecdsa'")

try:
    import aes
except ImportError:
    sys.exit("Error: AES does not seem to be installed. Try 'sudo pip install slowaes'")

try:
    from lib import Wallet, WalletSynchronizer, format_satoshis, mnemonic, prompt_password, parse_proxy_options, SimpleConfig
except ImportError:
    from electrum import Wallet, WalletSynchronizer, format_satoshis, mnemonic, prompt_password, parse_proxy_options, SimpleConfig

from decimal import Decimal

known_commands = {
    'help':'Prints this help',
    'validateaddress':'Check that the address is valid', 
    'balance': "Display the balance of your wallet or of an address.\nSyntax: balance [<address>]", 
    'contacts': "Show your list of contacts", 
    'create':'Create a wallet', 
    'restore':'Restore a wallet', 
    'payto':"""Create and broadcast a transaction.
Syntax: payto <recipient> <amount> [label]
<recipient> can be a bitcoin address or a label
options:\n  --fee, -f: set transaction fee\n  --fromaddr, -s: send from address -\n  --changeaddr, -c: send change to address
            """,
    'sendtx':
            'Broadcasts a transaction to the network. \nSyntax: sendtx <tx>\n<tx> must be in hexadecimal.',
    'password': 
            "Changes your password",
    'addresses':  
            """Shows your list of addresses.
options:
  -a: show all addresses, including change addresses
  -k: show private keys
  -b: show the balance of addresses""",

    'history':"Shows the transaction history",
    'label':'Assign a label to an item\nSyntax: label <tx_hash> <label>',
    'mktx':
        """Create a signed transaction, password protected.
Syntax: mktx <recipient> <amount> [label]
options:\n  --fee, -f: set transaction fee\n  --fromaddr, -s: send from address -\n  --changeaddr, -c: send change to address
        """,
    'seed':
            "Print the generation seed of your wallet.",
    'import': 
            'Imports a key pair\nSyntax: import <address>:<privatekey>',
    'signmessage':
            'Signs a message with a key\nSyntax: signmessage <address> <message>\nIf you want to lead or end a message with spaces, or want double spaces inside the message make sure you quote the string. I.e. " Hello  This is a weird String "',
    'verifymessage':
             'Verifies a signature\nSyntax: verifymessage <address> <signature> <message>\nIf you want to lead or end a message with spaces, or want double spaces inside the message make sure you quote the string. I.e. " Hello  This is a weird String "',
    'eval':  
             "Run python eval() on an object\nSyntax: eval <expression>\nExample: eval \"wallet.aliases\"",
    'deseed':
            "Remove seed from the wallet. The seed is stored in a file that has the name of the wallet plus '.seed'",
    'reseed':
            "Restore seed of the wallet. The wallet must have no seed, and the seed must match the wallet's master public key.",
    'freeze':'',
    'unfreeze':'',
    'prioritize':'',
    'unprioritize':'',
    }



offline_commands = [ 'password', 'mktx', 'label', 'contacts', 'help', 'validateaddress', 'signmessage', 'verifymessage', 'eval', 'create', 'addresses', 'import', 'seed','deseed','reseed','freeze','unfreeze','prioritize','unprioritize']

protected_commands = ['payto', 'password', 'mktx', 'seed', 'import','signmessage' ]

if __name__ == '__main__':

    # Load simple config class
    simple_config = SimpleConfig()

    usage = "usage: %prog [options] command\nCommands: "+ (', '.join(known_commands))
    parser = optparse.OptionParser(prog=usage)
    parser.add_option("-g", "--gui", dest="gui", default=simple_config.config["gui"], help="gui")
    parser.add_option("-w", "--wallet", dest="wallet_path", help="wallet path (default: electrum.dat)")
    parser.add_option("-o", "--offline", action="store_true", dest="offline", default=False, help="remain offline")
    parser.add_option("-a", "--all", action="store_true", dest="show_all", default=False, help="show all addresses")
    parser.add_option("-b", "--balance", action="store_true", dest="show_balance", default=False, help="show the balance at listed addresses")
    parser.add_option("-k", "--keys",action="store_true", dest="show_keys",default=False, help="show the private keys of listed addresses")
    parser.add_option("-f", "--fee", dest="tx_fee", default="0.005", help="set tx fee")
    parser.add_option("-s", "--fromaddr", dest="from_addr", default=None, help="set source address for payto/mktx. if it isn't in the wallet, it will ask for the private key unless supplied in the format public_key:private_key. It's not saved in the wallet.")
    parser.add_option("-c", "--changeaddr", dest="change_addr", default=None, help="set the change address for payto/mktx. default is a spare address, or the source address if it's not in the wallet")
    parser.add_option("-r", "--remote", dest="remote_url", default=None, help="URL of a remote wallet")
    parser.add_option("-p", "--proxy", dest="proxy", default=simple_config.config["proxy"], help="set proxy [type:]host[:port], where type is socks4,socks5 or http")
    parser.add_option("-m", "--memory", dest="memory_seed", default=None, help="Keep wallet in memory only")
    options, args = parser.parse_args()

    if type(options.proxy) == type(''):
		options.proxy = parse_proxy_options(options.proxy)

    wallet = Wallet()
    if options.memory_seed:
        if options.memory_seed == "new":
            wallet.new_seed(None)
        else:
            wallet.seed = mnemonic.mn_decode(options.memory_seed.split(' '))
        wallet.init_mpk(wallet.seed)
        wallet.file_exists = False
    else:
        wallet.set_path(options.wallet_path)
        wallet.read()

    wallet.remote_url = options.remote_url

    if len(args)==0:
        url = None
        cmd = 'gui'
    elif len(args)==1 and re.match('^bitcoin:', args[0]):
        url = args[0]
        cmd = 'gui'
    else:
        cmd = args[0]
        firstarg = args[1] if len(args) > 1 else ''
       
    #this entire if/else block is just concerned with importing the 
    #right GUI toolkit based the GUI command line option given 
    if cmd == 'gui':
        
        if options.gui=='gtk':
            try:
                import lib.gui as gui
            except ImportError:
                import electrum.gui as gui
        elif options.gui=='qt':
            try:
                import lib.gui_qt as gui
            except ImportError:
                import electrum.gui_qt as gui
        elif options.gui == 'lite':
            # Let's do some dep checking and handle missing ones gracefully
            try:
              from PyQt4.QtCore import *
              from PyQt4.QtGui import *
            except ImportError:
              print "You need to have PyQT installed to run Electrum in graphical mode."
              print "If you have pip installed try 'sudo pip install pyqt' if you are on Debian/Ubuntu try 'sudo apt-get install python-qt4'."
              sys.exit(0)

            qtVersion = qVersion()
            if not(int(qtVersion[0]) >= 4 and int(qtVersion[2]) >= 7):
              app = QApplication(sys.argv)
              QMessageBox.warning(None,"Could not start Lite GUI.", "Electrum was unable to load the 'Lite GUI' because it needs Qt version >= 4.7.\nElectrum is now setup to load the Pro GUI.")

              simple_config.set_key("gui", "qt")

              try:
                  import lib.gui_qt as gui
              except ImportError:
                  import electrum.gui_qt as gui
            else:
              #use the lite version if no toolkit specified
              try:
                import lib.gui_lite as gui
              except ImportError:
                import electrum.gui_lite as gui
        else:
            sys.exit("Error: Unknown GUI: " + options.gui)

        gui = gui.ElectrumGui(wallet)
        interface = WalletSynchronizer(wallet, True, gui.server_list_changed, options.proxy)
        interface.start()

        try:
            found = wallet.file_exists
            if not found and not options.memory_seed:
                found = gui.restore_or_create()
        except SystemExit, e:
            exit(e)
        except BaseException, e:
            import traceback
            traceback.print_exc(file=sys.stdout)
            #gui.show_message(e.message)
            exit(1)

        if not found and not options.memory_seed:
            exit(1)
        gui.main(url)
        wallet.save()
        sys.exit(0)

    if cmd not in known_commands:
        cmd = 'help'

    if not wallet.file_exists and (cmd not in ['help','create','restore']) and not options.memory_seed:
        print "Error: Wallet file not found."
        print "Type 'electrum create' to create a new wallet, or provide a path to a wallet with the -w option"
        sys.exit(0)
    
    if cmd in ['create', 'restore']:
        if wallet.file_exists:
            sys.exit("Error: Remove the existing wallet first!")
        password = prompt_password("Password (hit return if you do not wish to encrypt your wallet):")

        w_host, w_port, w_protocol = wallet.server.split(':')
        host = raw_input("server (default:%s):"%w_host)
        port = raw_input("port (default:%s):"%w_port)
        protocol = raw_input("protocol [t=tcp;h=http;n=native] (default:%s):"%w_protocol)
        fee = raw_input("fee (default:%s):"%( str(Decimal(wallet.fee)/100000000)) )
        gap = raw_input("gap limit (default 5):")
        if host: w_host = host
        if port: w_port = port
        if protocol: w_protocol = protocol
        wallet.server = w_host + ':' + w_port + ':' +w_protocol
        if fee: wallet.fee = float(fee)
        if gap: wallet.gap_limit = int(gap)

        if cmd == 'restore':
            seed = raw_input("seed:")
            try:
                seed.decode('hex')
            except:
                print_error("Warning: Not hex, trying decode.")
                seed = mnemonic.mn_decode( seed.split(' ') )
            if not seed:
                sys.exit("Error: No seed")

            wallet.seed = str(seed)
            wallet.init_mpk( wallet.seed )
            if not options.offline:
                WalletSynchronizer(wallet).start()
                print "Recovering wallet..."
                wallet.up_to_date_event.clear()
                wallet.up_to_date = False
                wallet.update()
                if wallet.is_found():
                    print "Recovery successful"
                else:
                    print_error("Warning: Found no history for this wallet")
            else:
                wallet.synchronize()
            wallet.fill_addressbook()
            wallet.save()
            print_error("Wallet saved in '" + wallet.path)
        else:
            wallet.new_seed(None)
            wallet.init_mpk( wallet.seed )
            wallet.synchronize() # there is no wallet thread 
            wallet.save()
            print "Your wallet generation seed is: " + wallet.seed
            print "Please keep it in a safe place; if you lose it, you will not be able to restore your wallet."
            print "Equivalently, your wallet seed can be stored and recovered with the following mnemonic code:"
            print "\""+' '.join(mnemonic.mn_encode(wallet.seed))+"\""
            print "Wallet saved in '%s'"%wallet.path
            
        if password:
            wallet.update_password(wallet.seed, None, password)

    # check syntax
    if cmd in ['payto', 'mktx']:
        try:
            to_address = args[1]
            amount = int( 100000000 * Decimal(args[2]) )
            change_addr = None
            label = ' '.join(args[3:])
            if options.tx_fee: 
                options.tx_fee = int( 100000000 * Decimal(options.tx_fee) )
        except:
            firstarg = cmd
            cmd = 'help'

    # open session
    if cmd not in offline_commands and not options.offline:
        WalletSynchronizer(wallet).start()
        wallet.update()
        wallet.save()

    # check if --from_addr not in wallet (for mktx/payto)
    is_temporary = False
    from_addr = None
    if options.from_addr:
        from_addr = options.from_addr
        if from_addr not in wallet.all_addresses():
            is_temporary = True
                
    # commands needing password
    if cmd in protected_commands or ( cmd=='addresses' and options.show_keys):
        password = prompt_password('Password:', False) if wallet.use_encryption and not is_temporary else None
        # check password
        try:
            wallet.pw_decode( wallet.seed, password)
        except:
            print_error("Error: This password does not decode this wallet.")
            exit(1)

    if cmd == 'import':
        # See if they specificed a key on the cmd line, if not prompt
        if len(args) > 1:
            keypair = args[1]
        else:
            keypair = prompt_password('Enter Address:PrivateKey (will not echo):', False)
        try:
            wallet.import_key(keypair,password)
            wallet.save()
            print "Keypair imported"
        except BaseException, e:
            print_error("Error: Keypair import failed: " + str(e))

    if cmd == 'help':
        cmd2 = firstarg
        if cmd2 not in known_commands:
            parser.print_help()
            print "Type 'electrum help <command>' to see the help for a specific command"
            print "Type 'electrum --help' to see the list of options"
            print "List of commands:", ', '.join(known_commands)
        else:
            print known_commands[cmd2]

    elif cmd == 'seed':
        seed = wallet.pw_decode( wallet.seed, password)
        print seed + ' "' + ' '.join(mnemonic.mn_encode(seed)) + '"'

    elif cmd == 'deseed':
        if not wallet.seed:
            print_error("Error: This wallet has no seed")
        elif wallet.use_encryption:
            print_error("Error: This wallet is encrypted")
        else:
            ns = wallet.path + '.seed'
            print "Warning: you are going to extract the seed from '%s'\nThe seed will be saved in '%s'"%(wallet.path,ns)
            if raw_input("Are you sure you want to continue? (y/n) ") in ['y','Y','yes']:
                f = open(ns,'w')
                f.write(repr({'seed':wallet.seed, 'imported_keys':wallet.imported_keys})+"\n")
                f.close()
                wallet.seed = ''
                for k in wallet.imported_keys.keys(): wallet.imported_keys[k] = ''
                wallet.save()
                print "Done."
            else:
                print_error("Action canceled.")

    elif cmd == 'reseed':
        if wallet.seed:
            print "Warning: This wallet already has a seed", wallet.seed
        else:
            ns = wallet.path + '.seed'
            try:
                f = open(ns,'r')
                data = f.read()
                f.close()
            except IOError:
                sys.exit("Error: Seed file not found")
            try:
                import ast
                d = ast.literal_eval( data )
                seed = d['seed']
                imported_keys = d.get('imported_keys',{})
            except:
                sys.exit("Error: Error with seed file")

            mpk = wallet.master_public_key
            wallet.seed = seed
            wallet.imported_keys = imported_keys
            wallet.use_encryption = False
            wallet.init_mpk(seed)
            if mpk == wallet.master_public_key:
                wallet.save()
                print "Done: " + wallet.path
            else:
                print_error("Error: Master public key does not match")

    elif cmd == 'validateaddress':
        addr = args[1]
        print wallet.is_valid(addr)

    elif cmd == 'balance':
        try:
            addrs = args[1:]
        except:
            pass
        if addrs == []:
            c, u = wallet.get_balance()
            if u:
                print Decimal( c ) / 100000000 , Decimal( u ) / 100000000
            else:
                print Decimal( c ) / 100000000
        else:
            for addr in addrs:
                c, u = wallet.get_addr_balance(addr)
                if u:
                    print "%s %s, %s" % (addr, str(Decimal(c)/100000000), str(Decimal(u)/100000000))
                else:
                    print "%s %s" % (addr, str(Decimal(c)/100000000))

    elif cmd in [ 'contacts']:
        for addr in wallet.addressbook:
            print addr, "   ", wallet.labels.get(addr)

    elif cmd == 'eval':
        print eval(args[1])
        wallet.save()

    elif cmd in [ 'addresses']:
        for addr in wallet.all_addresses():
            if options.show_all or not wallet.is_change(addr):

                flags = wallet.get_address_flags(addr)
                label = wallet.labels.get(addr,'')
                
                if label: label = "\"%s\""%label

                if options.show_balance:
                    h = wallet.history.get(addr,[])
                    #ni = no = 0
                    #for item in h:
                    #    if item['is_input']:  ni += 1
                    #    else:              no += 1
                    b = format_satoshis(wallet.get_addr_balance(addr)[0])
                else: b=''
                m_addr = "%34s"%addr
                if options.show_keys:
                    m_addr += ':' + str(wallet.get_private_key_base58(addr, password))
                print flags, m_addr, b, label

    if cmd == 'history':
        lines = wallet.get_tx_history()
        b = 0 
        for line in lines:
            import datetime
            v = line['value'] 
            b += v
            try:
                time_str = str( datetime.datetime.fromtimestamp( line['timestamp']))
            except:
                print line['timestamp']
                time_str = 'pending'
            label = line.get('label')
            if not label: label = line['tx_hash']
            else: label = label + ' '*(64 - len(label) )

            print time_str , "  " + label + "  " + format_satoshis(v)+ "  "+ format_satoshis(b)
        print "# balance: ", format_satoshis(b)

    elif cmd == 'label':
        try:
            tx = args[1]
            label = ' '.join(args[2:])
        except:
            print_error("Error. Syntax:  label <tx_hash> <text>")
            sys.exit(1)
        wallet.labels[tx] = label
        wallet.save()
            
    elif cmd in ['payto', 'mktx']:
        if from_addr and is_temporary:
            if from_addr.find(":") == -1:
                keypair = from_addr + ":" + prompt_password('Private key:', False)
            else:
                keypair = from_addr
                from_addr = keypair.split(':')[0]
            if not wallet.import_key(keypair,password):
                print_error("Error: Invalid key pair")
                exit(1)
            wallet.history[from_addr] = interface.retrieve_history(from_addr)
            wallet.update_tx_history()
            change_addr = from_addr

        if options.change_addr:
            change_addr = options.change_addr

        for k, v in wallet.labels.items():
            if v == to_address:
                to_address = k
                print "alias", to_address
                break
            if change_addr and v == change_addr:
                change_addr = k
        try:
            tx = wallet.mktx( to_address, amount, label, password,
                fee = options.tx_fee, change_addr = change_addr, from_addr = from_addr )
        except:
            import traceback
            traceback.print_exc(file=sys.stdout)
            tx = None

        if tx and cmd=='payto': 
            r, h = wallet.sendtx( tx )
            print h
        else:
            print tx

        if is_temporary:
            wallet.imported_keys.pop(from_addr)
            del(wallet.history[from_addr])
        wallet.save()

    elif cmd == 'sendtx':
        tx = args[1]
        r, h = wallet.sendtx( tx )
        print h

    elif cmd == 'password':
        try:
            seed = wallet.pw_decode( wallet.seed, password)
        except ValueError:
            sys.exit("Error: Password does not decrypt this wallet.")

        new_password = prompt_password('New password:')
        wallet.update_password(seed, password, new_password)

    elif cmd == 'signmessage':
        if len(args) < 3:
            print_error("Error: Invalid usage of signmessage.")
            print known_commands[cmd]
            sys.exit(1)
        address = args[1]
        message = ' '.join(args[2:])
        if len(args) > 3:
            print "Warning: Message was reconstructed from several arguments:", repr(message)
        print wallet.sign_message(address, message, password)

    elif cmd == 'verifymessage':
        try:
            address = args[1]
            signature = args[2]
            message = ' '.join(args[3:])
        except:
            print_error("Error: Not all parameters were given, displaying help instead.")
            print known_commands[cmd]
            sys.exit(1)
        if len(args) > 4:
            print "Warning: Message was reconstructed from several arguments:", repr(message)
        try:
            wallet.verify_message(address, signature, message)
            print True
        except BaseException as e:
            print "Verification error: {0}".format(e)
            print False

    elif cmd == 'freeze':
        addr = args[1]
        print self.wallet.freeze(addr)
        
    elif cmd == 'unfreeze':
        addr = args[1]
        print self.wallet.unfreeze(addr)

    elif cmd == 'prioritize':
        addr = args[1]
        print self.wallet.prioritize(addr)

    elif cmd == 'unprioritize':
        addr = args[1]
        print self.wallet.unprioritize(addr)

